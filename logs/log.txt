2023/09/12
reactinit
サーバ構成を考えた．何とかなりそう
やろうと思えば他にサーバを用意する必要もないかもしれない
単語があるかどうかの判定は以下のサイトでやる
https://sakura-paris.org/About/%E5%BA%83%E8%BE%9E%E8%8B%91%E7%84%A1%E6%96%99%E6%A4%9C%E7%B4%A2/changelog
Socket.ioでできそう
https://solutionware.jp/2017/11/25/socket-io%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E7%B0%A1%E5%8D%98%E3%81%AB%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%83%84%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/
何とかなるやろ

2023/09/13
とりあえずチャットアプリを作ってみる
何とか出来た
dockerを使った方がいいのでファイル構成を変更
CORSエラーの回避は面倒すね一応できたけども
次はdockerに対応させる
先にCOPYしておかないと駄目みたいね覚えておこう
https://qiita.com/suzuki0430/items/fcf57968365d15419601
できた

次は，ルーム的な操作
localstrogeで何とかする

2023/09/14
ルーム処理をうまくできたぽい
全員のルームIDを変更したらいけないね

バックで必要な物
roomの管理(なくてもよい)
単語が投げられた時の動作
時間動作
ルールの保管
まず単語動作から
object型でゲームの推移を記録する
{
    room_id: uuid, // 部屋のID
    players: [], // 参加しているプレイヤーID
    turn: string, // どのプレイヤーの番か
    history: [], // しりとりの履歴
    rules: [] // ルール
}
これで足りるかな？
roomsはsetオブジェクトらしい
https://zenn.dev/oreo2990/articles/5ccc8323874560

次は，ゲームの初期設定
初期データはどうにかなったので受け取り
SEND_WORDでは送られてきた文字列をルールにのっとっているか確認して判定とhistoryを返す
入力が正当なとき，プレイヤーはturnを交代，historyに文字列を追加する